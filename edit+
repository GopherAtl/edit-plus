--[===============================================]

--edit+

local programDir=shell.getRunningProgram():match("^(.-/?)[^/]+$")

local settings = {
  recentFiles = { },
  syntaxStyle = "pastebin",
}


function grabFile(branch,name,load)
  write("downloading '"..name.."'...")

  local req=http.get("https://raw.githubusercontent.com/GopherAtl/edit-plus/"..branch.."/"..name)
  if req==nil then
    error("Cound't make request!")
  end

  if req.getResponseCode()~=200 then
    req.close()
    error("Unexpected response code "..req.getResponseCode())
  end

  local text=req.readAll()

  req.close()


  local file=fs.open(programDir..name,"w")
  if not file then
    error("Couldn't open file '"..name.."' for writing!")
  end

  file.write(text)
  file.close()
  print("success! "..#text.." bytes")
  if load then
    os.loadAPI(programDir..name)
  end
end



local function loadAPI(name, downloadIfMissing)
  if not _G[name] then
    --search for it
    local searchPaths={"/",shell.dir().."/","apis/",programDir,"/usr/lib/","/lib/"}
    for i=1,#searchPaths do

      if searchPaths[i]==nil then
        print(shell.getRunningProgram())
        print(shell.getRunningProgram():match("^(.-/)%w+$"))
      end
      if fs.exists(searchPaths[i]..name) then
        os.loadAPI(searchPaths[i]..name)
        break
      end
    end
    if not _G[name] then
      if downloadIfMissing then
        grabFile(settings.branch,name,true)
      else
        error("Couldn't find "..name.." api!")
      end
    end
  end
end



local settingsPath

local function loadSettings()
  local file=fs.open(settingsPath,"r")
  if not file then
    error("Couldn't open settings file to read!")
  end
  local text=file.readAll()
  file.close()
  local t=textutils.unserialize(text)
  --copy fields over, so defaults for new settings don't break things when new features added
  for k,v in pairs(t) do
    settings[k]=v
  end
end


local function saveSettings()
  local file=fs.open(settingsPath,"w")
  if not file then
    --TODO: in-editor error display rather than crash, which might lose unsaved
    --changes?
    error("Couldn't open settings file to write!")
  end
  file.write(textutils.serialize(settings))
  file.close()
end

--load saved config settings
if fs.exists(".edit+") then
  settingsPath=".edit+"
  loadSettings()
elseif fs.exists("/etc") and fs.isDir("/etc") then
  settingsPath="/etc/.edit+"
  if fs.exists("/etc/.edit+") then
    loadSettings()
  else
    --create file with defaults
    saveSettings()
  end
else
  settingsPath=programDir..".edit+"
  if fs.exists(settingsPath) then
    loadSettings()
  else
    saveSettings()
  end
end



local args={...}


if #args<1 then
  print[[
  usage:
edit+ <filename>
edit+ --update
edit+ --update beta]]
return
end

if args[1]=="--update" then
  local branch="master"
  --update mahself!
  if args[2] then
    if args[2]=="beta" then
      branch="dev"
    else
      print("unrecognized 2nd arg to --update.")
      return
    end
  end
  print("updating files...")
  local path=shell.dir().."/"

  local filelist
  do
    local req=http.get("https://raw.githubusercontent.com/GopherAtl/edit-plus/"..branch.."/filelist.txt")
    filelist=req.readAll()
    req.close()
  end

  for ftype,fname in filelist:gmatch("(%w+):([%w%+]+)") do
    grabFile(branch,fname)
  end
  --note this in the settings, we'll force-reload the APIs
  settings.freshUpdate=true
  settings.branch=branch
  saveSettings()
  return
end

if settings.freshUpdate then
  if hilight then os.unloadAPI("hilight") end
  if document then os.unloadAPI("document") end
  settings.freshUpdate=nil
  saveSettings()
  --load, downloading if they're missing completely (as apis added in this update will be,
  --since old update didn't know to download them)
  loadAPI("hilight",true)
else
  --load /without/ downloading
  loadAPI("hilight")
end


local filename=args[1]

local filePath=shell.dir().."/"..filename
local lines={}

local prevState

do
  local prevState={}
  local file=io.open(filePath,"r")
  if file~=nil then
    for line in file:lines() do
      lines[#lines+1]=hilight.hilightToSpans(line,prevState)
      prevState=lines[#lines].state
    end
    file:close()
  else
    lines[1]={rawText="",state={}}
  end
end




term.clear()

local running=true
local w,h=term.getSize()
local scrollPos={x=1,y=1}
local curPos={x=1,y=1}
local selectBounds
local lastClickPos={x=1,y=1}
local clipboard

local viewRect
local mainMenu, advancedMenu, contextMenu

local guiElements = {}
local activeGuiElement=0

local dirtyLines={}

local drawMenu

local blockSelecting=false

local function updateViewRect()
  w,h=term.getSize()
  viewRect={
      x=1,
      y=1,
      w=w,
      h=settings.hideMenus and h or (h-1),
    }
end

updateViewRect()

local function curToTextPos(curPos)
  local lineNum=curPos.y+scrollPos.y-1
  local index
  if lineNum>#lines then
    lineNum=#lines
    index=#lines[#lines].rawText+1
  else
    index=math.min(curPos.x+scrollPos.x-1,#lines[lineNum].rawText+1)
  end
  return {x=index,y=lineNum}
end

local function textToCurPos(textPos)
  return {
      x=textPos.x-scrollPos.x+1,
      y=textPos.y-scrollPos.y+1,
  }
end


local function drawLineNum()
  lineNum=" "..tostring(scrollPos.y+curPos.y-1).." "
  term.setCursorPos(w-#lineNum+1,h)
  term.setBackgroundColor(colors.white)
  term.setTextColor(colors.black)
  term.write(lineNum)
  term.setBackgroundColor(colors.black)
  term.setTextColor(colors.white)
end

local function redrawLine(screenLine)
  local lineNum=screenLine+scrollPos.y-1
  if lineNum<=#lines and screenLine<=viewRect.h then
    local selStart,selEnd=0,-1
    local spans=lines[lineNum]
    if selectBounds and selectBounds[1].y<=lineNum and selectBounds[2].y>=lineNum then
      --we'll be doing selecting here
      selStart,selEnd=1,#spans.rawText+1
      if selectBounds[1].y==lineNum then
        selStart=selectBounds[1].x
      end
      if selectBounds[2].y==lineNum then
        selEnd=selectBounds[2].x
      end
    end

    term.setCursorPos(2-scrollPos.x,screenLine)
    local index=1
    for i=1,#spans do
      local len=#spans[i].text
      local subStart,subEnd=1,len
      if index>selEnd or index+len-1<selStart then
        subStart,subEnd=len+1,len+1
      else
        if selStart>=index then
          subStart=selStart-index+1
        end
        if selEnd<index+len-1 then
          subEnd=len - (index+len-1 - selEnd)
        end
      end
      if subStart>1 then
        term.setTextColor(spans[i].color)
        term.write(spans[i].text:sub(1,subStart-1))
      end
      if subStart~=len+1 then
        term.setTextColor(term.isColor() and colors.white or colors.black)
        term.setBackgroundColor(term.isColor() and colors.blue or colors.white)
        term.write(spans[i].text:sub(subStart,subEnd))
        term.setBackgroundColor(colors.black)
      end
      if subEnd<len then
        term.setTextColor(spans[i].color)
        term.write(spans[i].text:sub(subEnd+1))
      end
      index=index+len
    end
    if selEnd>#spans.rawText then
      term.setBackgroundColor(term.isColor() and colors.blue or colors.white)
      term.write(" ")
      term.setBackgroundColor(colors.black)
    end

    local x,y=term.getCursorPos()
    term.write((" "):rep(math.max(0,w-x+1)))
  else
    term.setCursorPos(1,screenLine)
    term.write((" "):rep(w))
  end
  if screenLine==h then
    if settings.advancedMenus then
      advancedMenu:draw()
    else
      mainMenu:draw()
    end
    drawLineNum()
  end
end

local function dirtyFrom(index)
  for y=index,h do
    dirtyLines[y]=true
  end
end

local function redrawDirty()
  if dirtyLines.all then
    for i=1,h do
      redrawLine(i)
    end
  else
    for r,_ in pairs(dirtyLines) do
       redrawLine(r)
    end
  end
  dirtyLines={}
end

local function updateSelect(newBounds)
  local startY,endY
  if newBounds then
    if selectBounds then
      startY,endY=math.min(selectBounds[1].y,newBounds[1].y),math.max(selectBounds[2].y,newBounds[2].y)
    else
      startY,endY=newBounds[1].y,newBounds[2].y
    end
  elseif selectBounds then
    blockSelecting=nil
    blockStart=nil
    startY,endY=selectBounds[1].y,selectBounds[2].y
  else
    blockSelecting=nil
    blockStart=nil
    return
  end
  selectBounds=newBounds
  for i=startY-scrollPos.y+1,endY-scrollPos.y+1 do
    if i>=1 and i<=viewRect.h then
      redrawLine(i)
    end
  end
end


local function cursorRow()
  return lines[curPos.y+scrollPos.y-1]
end

local function trueCurPos()
  local cx,cy=curPos.x,curPos.y
  local row=cursorRow()
  cx=math.min(cx,#row.rawText-scrollPos.x+2)
  return cx,cy
end


local function curTextPos()
  local lineNum=curPos.y+scrollPos.y-1
  local index=math.min(curPos.x+scrollPos.x-1,#lines[lineNum].rawText+1)
  return lineNum,index
end


local function doCursor()
  if settings.advancedMenus and advancedMenu.visible then
    term.setCursorPos(2,h)
  else
    term.setCursorPos(trueCurPos())
  end
  term.setTextColor(colors.white)
  term.setCursorBlink(true)
end


local function setScrollX(pos)
  local lineNum,index=curTextPos()
  local target=math.max(math.min(pos,#lines[lineNum].rawText-w+2),1)
  if target~=scrollPos.x then
    scrollPos.x=target
    dirtyLines.all=true
  end
end

local function setScrollY(pos,leaveCursor)
  local lineNum,index=curTextPos()
  local target=math.max(math.min(pos,#lines-viewRect.h+1),1)
  if target~=scrollPos.y then
    local offset=target-scrollPos.y
    scrollPos.y=target
    term.scroll(offset)
    dirtyLines.all=true
    if leaveCursor then
      curPos.y=curPos.y-offset
    end
    return true
  end
end

local function scrollY(offset,leaveCursor)
  return setScrollY(scrollPos.y+offset,leaveCursor)
end

local function setCursorPos(newX,newY)
  newY=math.min(#lines,math.max(1,newY or (curPos.y+scrollPos.y-1)))
  newX=math.max(1,newX)

  local screenY=newY-scrollPos.y+1
  if screenY>viewRect.h then
    scrollY(screenY-viewRect.h)
    screenY=viewRect.h
  elseif screenY<1 then
    scrollY(screenY-1)
    screenY=1
  end
  curPos.y=screenY

  local screenX=newX-scrollPos.x+1
  if screenX>viewRect.w then
    setScrollX(newX-viewRect.w+1)
    screenX=viewRect.w
  elseif screenX<1 then
    setScrollX(scrollPos.x+screenX-1)
    screenX=1
  end
  curPos.x=screenX

  if blockSelecting then
    local dragFrom=blockStart
    local dragTo={x=newX, y=newY}
    if dragTo.y<dragFrom.y or (dragTo.y==dragFrom.y and dragTo.x<dragFrom.x) then
      newBounds={dragTo,dragFrom}
    else
      newBounds={dragFrom,dragTo}
    end
    updateSelect(newBounds)
  else
    updateSelect()
  end
  drawLineNum()
  doCursor()
end

local function gotoLine(lineNum)
  setCursorPos(1,lineNum)
end


local function moveCursor(x,y)
  y=y or 0
  setCursorPos(curPos.x+scrollPos.x-1+x,curPos.y+scrollPos.y-1+y)
end

local function cursorDown(amt)
  moveCursor(0,amt or 1)
end

local function cursorUp(amt)
  moveCursor(0,-(amt or 1))
end


local function updateLine(lineNum,newText,noProp,scream)
  local prevLineState={}
  newText=newText or lines[lineNum].rawText
  if lineNum>1 then
    prevLineState=lines[lineNum-1].state
  end
  local line=lines[lineNum]
  local prevEndState=line.state
  line=hilight.hilightToSpans(newText,prevLineState)
  lines[lineNum]=line
  dirtyLines[curPos.y]=true
  --check for an end state change and flag to propagate
  if not hilight.compareStates(line.state,prevEndState) then
    local prevState=line.state
    --for now just redoing whole file if needed, will make it incremental and/or deferred later
    if not noProp then
      if scream then error("Different! not noProp! Proping!") end
      for i=lineNum+1,#lines do
        prevEndState=lines[i].state
        lines[i]=hilight.hilightToSpans(lines[i].rawText,prevState)
        if i-scrollPos.y+1 <= viewRect.h then
          redrawLine(i-scrollPos.y+1)
        end
        prevState=lines[i].state
        --stop iterating if the state returns to expected
        if hilight.compareStates(prevState,prevEndState) then
          if scream then error("stopped prop at "..i) end
          break
        end
      end
    end
  end
end

local function deleteSelection()
  blockSelecting=false
  if selectBounds then
    local startY,endY=selectBounds[1].y,selectBounds[2].y
    local selectBounds=selectBounds
    curPos=textToCurPos(selectBounds[1])
    updateSelect()
    local prevEndState=lines[endY].state
    if startY==endY then
      local text=lines[startY].rawText
      updateLine(startY,text:sub(1,selectBounds[1].x-1)..text:sub(selectBounds[2].x+1))
    else
      local newText=lines[startY].rawText:sub(1,selectBounds[1].x-1,noProp)..lines[endY].rawText:sub(selectBounds[2].x+1)
      for i=startY+1,endY do
        table.remove(lines,startY+1)
      end
      updateLine(startY,newText,false)
      if not hilight.compareStates(lines[startY].state,prevEndState) then
        updateLine(startY+1)
      end
      dirtyFrom(startY-scrollPos.y+2)
    end
  end
end

local function insertText(text)
  if selectBounds then
    deleteSelection()
  end
  --get the affected line and actual x position in line
  local lineNum, index = curTextPos()
  local line=lines[lineNum]
  --insert our char!
  local cursorAdjust=#text
  local newText=line.rawText:sub(1,index-1)..text..line.rawText:sub(index)
  if lineNum>1 and (newText:match("^%s*end%s*$") or newText:match("^%s*elseif.*$") or newText:match("^%s*else%s*$") or newText:match("^%s*until.*$")) then
    --is the previous line indented the same as this line?
    local thisIndent=newText:match("^%s*")
    local prevIndent=lines[lineNum-1].rawText:match("^%s*")
    if #thisIndent>0 and #thisIndent==#prevIndent then
      --reduce the indent on this line
      newText=newText:sub(3)
      cursorAdjust=cursorAdjust-2
    end
  end

  updateLine(lineNum,newText)
  moveCursor(cursorAdjust,0)
  if curPos.x-scrollPos.x+1>w then
    setScrollX(curPos.x-w+1)
  end
  doCursor()
end

local function decreaseIndent()
  if selectBounds then
    for y=selectBounds[1].y,selectBounds[2].y do
      local text=lines[y].rawText
      local curCount=#text:match("^%s*")
      local tab=curCount>0 and (curCount%2==0 and 2 or 1)
      if tab then
        if y==selectBounds[1].y then
          selectBounds[1].x=selectBounds[1].x-tab
        end
        if y==selectBounds[2].y then
          selectBounds[2].x=selectBounds[2].x-tab
        end
        updateLine(y,text:sub(1+tab))
        if y==curPos.y+scrollPos.y-1 then
          curPos.x=curPos.x-tab
        end
      end
    end

    dirtyFrom(selectBounds[1].y-scrollPos.y+1)
  else
    local lineNum,index=curTextPos()
    local text=lines[lineNum].rawText
    local curCount=#text:match("^%s*")
    local tab=curCount>0 and (curCount%2==0 and 2 or 1)
    if tab then
      updateLine(lineNum,text:sub(1+tab))
      moveCursor(-tab,0)
    end
  end
end

local function increaseIndent()
  if selectBounds then
    for y=selectBounds[1].y,selectBounds[2].y do
      local curCount=#lines[y].rawText:match("^%s*")
      local tab=curCount%2==0 and 2 or 1
      updateLine(y,(" "):rep(tab)..lines[y].rawText)
      if y==selectBounds[1].y then
        selectBounds[1].x=selectBounds[1].x+tab
      end
      if y==selectBounds[2].y then
        selectBounds[2].x=selectBounds[2].x+tab
      end
      if y==curPos.y+scrollPos.y-1 then
        curPos.x=curPos.x+tab--moveCursor(tab,0)
      end
    end
    dirtyFrom(selectBounds[1].y-scrollPos.y+1)
  else
    local lineNum,index=curTextPos()
    local text=lines[lineNum].rawText
    local curCount=#text:match("^%s*")
    local tab=curCount%2==0 and 2 or 1
    updateLine(lineNum,(" "):rep(tab)..text)
    moveCursor(tab)
  end
end



local function save()
  file=io.open(filePath,"w")
  if file then
    for i=1,#lines do
      if i~=1 then
        file:write("\n")
      end
      file:write(lines[i].rawText)
    end
    file:close()
  end
end

local function load()
  --TODO: file dialog
end

local function new()
  --TODO: file dialog
  --actually, just make new, with filename nil'd, and do
  --file dialog on save if filename is nil.
  --will facilitate saveAs also.
end

   local helpPages={[[
Basic Menu:

Hotkeys for menu items
are in yellow, press to
select.
Ctrl closes the current
menu, arrows navigate,
enter selects.

special keys:

b - begin/end block
selection

tab - decrease indent on
selected line/block

    tab for next page
      ctrl to exit]], [[
Advanced Menu:

q - quit/exit
s - save file
r - run program
< or tab - decrease indent
> - increase indent
c - copy
x - cut
v - paste
b - toggle block sel
? - help (this)
h - toggle menu hiding
m - switch to basic menu



    tab for next page
      ctrl to exit]],}

local function help()
  term.setTextColor(colors.white)
  term.setBackgroundColor(colors.black)

  local pageNum=settings.advancedMenus and 2 or 1
  local redraw=true

  while true do
    if redraw then
      term.clear()
      term.setCursorPos(1,1)
      write(helpPages[pageNum])
      redraw=false
    end

    local e={os.pullEvent()}
    if e[1]=="key" then
      if e[2]==keys.tab then
        pageNum=pageNum%#helpPages+1
        redraw=true
      elseif e[2]==keys.leftCtrl then
        break
      end
    end
  end

  dirtyLines.all=true
end

local charKeys={[57]=' ', [43]='\\', [83]='.', [2]='1', [3]='2', [4]='3', [5]='4', [6]='5', [7]='6', [8]='7', [9]='8', [10]='9', [11]='0', [12]='-', [13]='=', [51]=',', [52]='.', [53]='/', [181]='/', [55]='*', [26]='[', [27]=']', [71]='7', [72]='8', [73]='9', [74]='-', [75]='4', [76]='5', [77]='6', [78]='+', [79]='1', [80]='2', [81]='3', [39]=';', [40]='"', [41]='`', [82]='0', [30]='a', [48]='b', [46]='c', [32]='d', [18]='e', [33]='f', [34]='g', [35]='h', [23]='i', [36]='j', [37]='k', [38]='l', [50]='m', [49]='n', [24]='o', [25]='p', [16]='q', [19]='r', [31]='s', [20]='t', [22]='u', [47]='v', [17]='w', [45]='x', [21]='y', [44]='z', }

local runEnv={shell=shell, multishell=multishell}
setmetatable(runEnv,{__index=_G})

local function run()
  --save changes first
  save()
  term.setTextColor(colors.white)
  term.setBackgroundColor(colors.black)
  term.clear()
  term.setCursorPos(1,1)

  local function logWrap(f)
    local log=fs.open("runlog","w")
    local co=coroutine.create(f)
    local filter={coroutine.resume(co)}
    while coroutine.status(co)~="dead" do
      local e={os.pullEventRaw()}
      if e[1]=="terminate" then
        break
      end
      if #filter<2 or filter[2]==e[1] then
        log.write(table.concat(e,",").."\n")
        filter={coroutine.resume(co,unpack(e))}
      end
      if filter[1]==false then
        break
      end
    end
    log.close()
  end

  local function replayWrap(f)
    local log=io.open("runlog","r")

    local co=coroutine.create(f)
    local filter={coroutine.resume(co)}

    for line in log:lines() do
      local args={}
      line:gsub("[^,]+",function(v) args[#args+1]=v end)
      if args[1]=="key" then
        args[2]=tonumber(args[2])
      elseif args[1]=="mouse_click" or args[2]=="mouse_drag" or args[2]=="mouse_scroll" then
        args[2]=tonumber(args[2])
        args[3]=tonumber(args[3])
        args[4]=tonumber(args[4])
      end
      sleep(.2)
      coroutine.resume(co,unpack(args))
    end
    log:close()
    while coroutine.status(co)~="dead" do
      local e={os.pullEventRaw()}
      if e[1]=="terminate" then
        break
      end
      if #filter<2 or filter[2]==e[1] then
        filter={coroutine.resume(co,unpack(e))}
      end
      if filter[1]==false then
        break
      end
    end
  end

  local succ
  local func,err=loadfile(filePath)
  if not func then
    succ=false
  else
    setfenv(func,runEnv)
    succ,err=pcall(func)
  end

  term.setTextColor(colors.white)
  term.setBackgroundColor(colors.black)
  if not succ and err then
    print("\nProgram '"..filePath.."' crashed with error:")
    printError(err)
  else
    print("\nprogram exited normally")
  end
  write("press a key to return to editor")
  e={os.pullEvent("key")}
  if charKeys[e[2]] then os.pullEvent() end
  if not succ then
    local lineNum,text=err:match(filename..":(%d+):(.-)")
    if lineNum then
      gotoLine(tonumber(lineNum))
    end
  end
  term.clear()
  dirtyFrom(1)
  doCursor()
end


local function copy()
  blockSelecting=false
  if selectBounds then
    local startY,endY=selectBounds[1].y,selectBounds[2].y
    local selectBounds=selectBounds
    clipboard={}
    if startY==endY then
      clipboard[1]=lines[startY].rawText:sub(selectBounds[1].x,selectBounds[2].x)
    else
      clipboard[1]=lines[startY].rawText:sub(selectBounds[1].x)
      for y=startY+1,endY-1 do
        clipboard[#clipboard+1]=lines[y].rawText
      end
      clipboard[#clipboard+1]=lines[endY].rawText:sub(1,selectBounds[2].x)
    end
  end
end

local function cut()
  copy()
  deleteSelection()
end

local function paste()
  if clipboard then
    --delete selection, if any, as we'll replace
    deleteSelection()
    local lineNum,index=curTextPos()
    --split this line at cursor
    local before,after=lines[lineNum].rawText:sub(1,index-1),lines[lineNum].rawText:sub(index)
    local newLines={}
    --append first cb line to before for first line
    newLines[1]=before..clipboard[1]
    --rest will be new lines
    for i=2,#clipboard do
      newLines[i]=clipboard[i]
    end
    --append after to last
    local newX=#newLines[#newLines]+1
    newLines[#newLines]=newLines[#newLines]..after

    --ok, update first line
    --insert rest
    local prevState=lines[lineNum].state
    for i=2,#newLines do
      table.insert(lines,lineNum+i-1,{state=hilight.copyState(prevState)})
      updateLine(lineNum+i-1,newLines[i],i==#newLines,true)
    end
    updateLine(lineNum,newLines[1],false)
    dirtyFrom(lineNum-scrollPos.y+1)
    --new cursor pos will be in that last line
    if #newLines>1 then
      cursorDown(#newLines-1)
    end
    setCursorPos(newX,lineNum+#newLines-1)
    blockSelecting=false
  end
end

local commands = {
  ["save"] = {
      func=save,
    },
  ["load"] = {
      func=load,
    },
  ["run"] = {
      func=run,
    },
  ["exit"] = {
      func=function() running=false end,
    },

  ["increase indent"] = {
      func=increaseIndent,
    },
  ["decrease indent"] = {
      func=decreaseIndent,
    },
  ["beginBlockSelect"] = {
      func=function()
        if blockSelecting then
          blockSelecting=false
        else
          blockSelecting=true
          blockStart=curToTextPos(curPos)
          updateSelect({blockStart,blockStart})
        end
      end,
    },

  ["copy"] = {
      func=copy,
    },
  ["cut"] = {
      func=cut,
    },
  ["paste"] = {
      func=paste,
    },

  ["toggleHideMenu"] = {
      func=function()
        settings.hideMenus=not settings.hideMenus;
        (settings.advancedMenus and advancedMenu or mainMenu).alwaysVisible=not settings.hideMenus
        saveSettings()
        updateViewRect()
        dirtyLines[h]=true
      end,
    },
  ["toggleAdvancedMenu"] = {
      func=function()
        settings.advancedMenus=not settings.advancedMenus
        saveSettings()
        if settings.advancedMenus then
          advancedMenu.alwaysVisible=not settings.hideMenus
          mainMenu.alwaysVisible=false
        else
          mainMenu.alwaysVisible=not settings.hideMenus
          advancedMenu.alwaysVisible=false
        end


        updateViewRect()
        dirtyLines[h]=true
     end,
   },

  ["help"] = {
      func=help,
    },
}

local basicMenuDef={
    horizontal=true,
    {label="&File", type="submenu", submenu={
        {label="&Save", type="command", cmd="save", },
--      {label="Save &As", type="command", cmd="saveAs", },
--      {label="&Load", type="command", cmd="load", },
--      {label="&New", type="command", cmd="new", },
        {label="&Run", type="command", cmd="run", },
        {label="E&xit", type="command", cmd="exit", },
      },
    },

    {label="&Edit", type="submenu", submenu={
        {label="Cut-&x", type="command", cmd="cut", },
        {label="&Copy", type="command", cmd="copy", },
        {label="Paste-&v", type="command", cmd="paste", },
        {label="Inc. Indent-&>", type="command", cmd="increase indent", },
        {label="Dec. Indent-&<", type="command", cmd="decrease indent", },
        {label="&Block select", type="command", cmd="beginBlockSelect", },
      },
    },
--  {label="&Search", type="submenu", submenu={
--      {label="&Find...", type="command", cmd="find", },
--      {label="Find &Next", type="command", cmd="findNext", },
--      {label="Find &Prev", type="command", cmd="findPrev", },
--      {label="&Replace...", type="command", cmd="findReplace", },
  {label="&View", type="submenu", submenu={
--      {label="&Line Numbers", type="command", cmd="toggleLineNums", },
--      {label="&Line Numbers", type="command", cmd="toggleLineNums", },
      {label="&Hide Menu", type="toggle", cmd="toggleHideMenu", test=function() return settings.hideMenus end},
      {label="&Advanced Menu", type="toggle", cmd="toggleAdvancedMenu", test=function() return settings.advancedMenus end },
    },
  },

  {label="&Help", type="command", cmd="help", },
}

local hotkeys = {
  ["c"]="copy",
  ["x"]="cut",
  ["v"]="paste",
  ["b"]="beginBlockSelect",
  [keys.tab]="decrease indent",
  ["<"]="decrease indent",
  [">"]="increase indent",
  ["q"]="exit",
  ["s"]="save",
  ["r"]="run",
  ["?"]="help",
  ["m"]="toggleAdvancedMenu",
  ["h"]="toggleHideMenu",
}

function drawMenuItem_color(item,x,y,width,isSelected)
  term.setCursorPos(x,y)
  term.setBackgroundColor(isSelected and colors.blue or colors.gray)
  --pre
  local w=1
  term.write(" ")
  if item.type=="toggle" then
    term.write("["..(item.test() and "X" or " ").."] ")
    w=w+3
  end
  if #item.pre>0 then
    term.setTextColor(colors.white)
    term.write(item.pre)
    w=w+#item.pre
  end
  term.setTextColor(colors.yellow)
  if item.embedKey then
    term.write(item.hk)
    term.setTextColor(colors.white)
    term.write(item.post)
    w=w+#item.hk+#item.post
    term.write((" "):rep(width-w))
  else
    term.write((" "):rep(width-w-1-#item.hk)..item.hk.." ")
  end
  term.setBackgroundColor(colors.black)
end

function drawMenuItem_basic(item,x,y,width,isSelected)
  term.setCursorPos(x,y)
  term.setBackgroundColor(colors.white)
  term.setTextColor(colors.black)
  local w=1
  term.write(" ")
  if item.type=="toggle" then
    term.write("["..(item.test() and "X" or " ").."] ")
    w=w+3
  end
  if #item.pre>0 then
    term.write(pre)
    w=w+#pre
  end
  if item.embedKey then
    term.write("("..item.hk..")"..item.post)
    w=w+2+#hk+#item.post
    term.write((" "):rep(width-w))
  else
    term.write((" "):rep(width-w-1-#item.hk)..item.hk.." ")
  end
  term.setBackgroundColor(colors.black)
end

local drawMenuItem=term.isColor() and drawMenuItem_color or drawMenuItem_basic

drawMenu =function(menu)
  if menu.visible or menu.alwaysVisible then
    if menu.horizontal then
      local offset=0
      for i=1,#menu do
        if menu.x+offset+menu[i].width - 1 > w then
          break
        end
        menu[i].x=menu.x+offset
        drawMenuItem(menu[i],menu.x+offset,menu.y,menu[i].width,menu.selected==i)
        offset=offset+menu[i].width
      end
      menu.lastX=offset
    else
      if menu.y+#menu > h then
        menu.y=h - #menu+1
      end
      if not menu.x then error("wat ") end
      if menu.width + menu.x  > w then
        menu.x=w-menu.width
      end
      for i=1,#menu do
        drawMenuItem(menu[i],menu.x,menu.y+i-1,menu.width,menu.selected==i)
      end
    end
    menu.dirty=false
  end
end

local function handleMenuEvent(menu, e)
  local keyNext=menu.horizontal and keys.right or keys.down
  local keyPrev=menu.horizontal and keys.left or keys.up
  local handled=false

  if e[1]=="key" then
    if not menu.childActive then
      handled = true
      if e[2]==keys.leftCtrl or e[2]==keys.rightAlt then
        menu:hide()
      elseif e[2]==keys.enter then
        --do the selected thing
        menu:doThing(menu.selected)
      elseif e[2]==keys.tab then
        menu:doThing("decrease indent")
      end
    end
    if not menu.childActive or menu.horizontal then
      if e[2]==keyNext then
        if menu.childActive then
          menu.childActive:hide()
        end
        menu.selected=menu.selected%#menu+1
        menu.dirty=true
        handled=true
      elseif e[2]==keyPrev then
        if menu.childActive then
          menu.childActive:hide()
        end
        menu.selected=menu.selected==1 and #menu or menu.selected-1
        menu.dirty=true
        handled=true
      end
    end
  elseif not menu.childActive and e[1]=="char" then
    handled = true
    local thing=menu.hkMap[e[2]:lower()]
    if thing then
      menu:doThing(thing)
    elseif e[2]:lower()=="b" then
      menu:doThing("beginBlockSelect")
    end

  elseif e[1]=="mouse_click" then
    local _,btn,clkX,clkY=unpack(e)
    if menu.horizontal and
        clkY==menu.y and clkX<=menu.lastX then
      if menu.childActive then
        menu.childActive:hide()
      end
      for i=menu.firstShown,#menu do
        if menu[i].x+menu[i].width>clkX then
          menu.selected=i
          menu.dirty=true
          handled = true
          if btn==1 then
            menu:doThing()
          end
          break
        end
      end
    elseif not menu.horizontal and
        clkY>=menu.y and clkY<menu.y+#menu and
        clkX>=menu.x and clkX<menu.x+menu.width then
      menu.selected=clkY-menu.y+1
      if btn==1 and menu[menu.selected].type=="command" then
        menu:doThing()
        handled = true
      end
    else
      menu:hide()
    end
  elseif not menu.childActive and e[1]=="paste" then
    insertText(e[2])
    command=nil
    menu:hide()
    handled = true
  end

  return handled
end

local function showMenu(menu)
  if menu.selected==nil then
    menu.selected=1
  end
  menu.dirty=true
  if menu.parent then
    menu.parent.childActive = menu
  end
  if not menu.visible then
    menu.visible=true
  end
end

local function hideMenu(menu,closeAll)
  if menu.visible then
    menu.selected=nil
    menu.dirty=true
    if menu.horizontal then
      dirtyLines[menu.y]=true
    else
      for y=1,#menu do
        dirtyLines[y+menu.y-1]=true
      end
    end
    if menu.parent then
      menu.parent.childActive = false
      if closeAll then
        menu.parent:hide(true)
      end
    end
    menu.visible=false
  end
  doCursor()
end

local function doThing(menu,thing)
  thing=thing or menu.selected
  local command=""

    if type(thing)=="number" then
      local item=menu[thing]
      if item then
        if item.type=="command" then
          command=item.cmd
        elseif item.type=="submenu" then
          menu:draw()
          command=nil
          item.submenu:show()
        elseif item.type=="toggle" then
          command=item.cmd
        end
      end
    elseif type(thing)=="string" then
      command=thing
    end

    if command then
      if commands[command] then
        commands[command].func()
        menu:hide(true)
      end
    end

end

local function updatePos(menu,x,y)
  local deltaX=x-menu.x
  local deltaY=y-menu.y
  menu.x=x
  menu.y=y
  for i=1,#menu do
    local item=menu[i]
    if item.type=="submenu" then
      item.submenu:updatePos(item.submenu.x+deltaX, item.submenu.y+deltaY)
    end
  end
end

local function buildMenu(menuDef,parent)
  local menu={hkMap={}}
  local id=menuDef.id or (#guiElements+1)
  guiElements[id]=menu
  menuDef.id=id

  menu.x,menu.y=1,h
  menu.parent=parent
  menu.firstShown=1
  menu.draw=drawMenu
  menu.handleEvent=handleMenuEvent
  menu.show = showMenu
  menu.hide = hideMenu
  menu.doThing = doThing
  menu.updatePos = updatePos

  if not menuDef.horizontal and menu.y+#menu>h then
    menu.y=h-#menu+1
  end

  menu.horizontal=menuDef.horizontal
  local longestLabel=0
  local offset=1
  for i=1,#menuDef do
    local menuItem=menuDef[i]
    local item={}
    for k,v in pairs(menuItem) do
      item[k]=v
    end
    local pre,pk,hk,post=menuItem.label:match("^([^&^-]-)(%-?)&(.)([^&]*)")
    item.pre=pre
    item.post=post
    item.hk=hk
    item.embedKey=pk~="-"
    item.x=menuDef.horizontal and offset or menu.x
    local labelLen
    if item.embedKey then
      labelLen=#pre+1+#post
      if not term.isColor() then
        labelLen=labelLen+2
      end
    else
      labelLen=#pre+2
      if not term.isColor() then
        labelLen=labelLen+1
      end
    end
    if menuItem.type=="toggle" then
      labelLen=labelLen+4
    end
    item.width=labelLen+2
    offset=offset+labelLen+2
    longestLabel=math.max(longestLabel,labelLen)
    menu[#menu+1]=item
    menu.hkMap[hk:lower()]=i
    if item.type=="submenu" then
      item.submenu=buildMenu(item.submenu,menu)
      if not item.submenu.x then error("wat "..item.label) end
      item.submenu.x,item.submenu.y=menu.x+item.width,menu.y+i-1
      if menuDef.horizontal then
        item.submenu.x,item.submenu.y=item.x,menu.y-#item.submenu
      end
      if not item.submenu.x then error("wat "..item.label) end
    end
  end
  menu.width=longestLabel+2
  return menu
end

advancedMenu={
  draw=function(menu)
      if menu.visible then
        term.setCursorPos(1,h)
        term.setTextColor(colors.white)
        term.write("> ")
        for k,v in pairs(hotkeys) do
          if type(k)=="string" then
            term.write(k)
          end
        end
        term.write("                                             ")
        term.setCursorPos(2,h)
      end
      menu.dirty=false
    end,
  handleEvent=function(menu,e)
      if e[1]=="key" or e[1]=="char" then
        if hotkeys[e[2]] then
          commands[hotkeys[e[2]]].func()
          menu:hide()
        elseif e[2]==keys.leftCtrl or e[2]==keys.rightAlt then
          menu:hide()
        end
      end
      return true
    end,
  show=showMenu,
  hide=hideMenu,
  y=h,  x=1,
  horizontal=true,

}


guiElements[#guiElements+1]=advancedMenu
advancedMenu.id=#guiElements

mainMenu=buildMenu(basicMenuDef)
dirtyFrom(1)
term.setCursorBlink(true)
doCursor()

if not settings.hideMenus then
  if settings.advancedMenus then
    advancedMenu.alwaysVisible=true
    advancedMenu.dirty=true
  else
    mainMenu.alwaysVisible=true
    --mainMenu.visible=true
    mainMenu.dirty=true
  end
end

while running do
  redrawDirty()
  for i=1,#guiElements do
    if guiElements[i].dirty then
      guiElements[i]:draw()
    end
  end

  doCursor()
  local e={os.pullEvent()}
  local handled=false
  for i=1,#guiElements do
    if guiElements[i].visible and guiElements[i].selected then
      handled=guiElements[i]:handleEvent(e)
      if handled then break end
    end
  end

  if not handled then
    if e[1]=="key" then
      local key=e[2]
      if key==keys.down then
        cursorDown()
        drawLineNum()
        doCursor()
      elseif key==keys.up then
        cursorUp()
        drawLineNum()
        doCursor()
      elseif key==keys.right then
        local lineNum,index=curTextPos()
        if curPos.x>index then
          curPos.x=index
        end
        if curPos.x+scrollPos.x-1>#lines[lineNum].rawText and curPos.y+scrollPos.y-1<#lines then
          setCursorPos(1,curPos.y+scrollPos.y)
        else
          moveCursor(1,0)
        end
        doCursor()
      elseif key==keys.left then
        local lineNum, index = curTextPos()
        if index==1 and lineNum>1 then
          setCursorPos(#lines[lineNum-1].rawText+1,lineNum-1)
        else
          setCursorPos(index-1,lineNum)
        end
        doCursor()
      elseif key==keys.pageDown then
        moveCursor(0,viewRect.h)
      elseif key==keys.pageUp then
        moveCursor(0,-viewRect.h)
      elseif key==keys.leftCtrl then
        if settings.advancedMenus then
          advancedMenu:show()
        else
          mainMenu:show()
        end
      elseif key==keys.enter then
        if selectBounds then
          deleteSelection()
        end
        --carry on with the cr
        local lineNum,index=curTextPos()
        local curText=lines[lineNum].rawText
        local pre,post=curText:sub(1,index-1),curText:sub(index)
        --check indent size of prior line
        local indent=(" "):rep(#(pre:match("^%s+") or ""))
        dirtyFrom(curPos.y)
        if pre:match("do%s*$") or pre:match("then%s*$") or pre:match("repeat%s*$") or pre:match("else%s*") then
          indent=indent.."  "
        end
        updateLine(lineNum,pre,true)
        table.insert(lines,lineNum+1,{state={}})
        updateLine(lineNum+1,indent..post)
        setCursorPos(#indent+1,lineNum+1)

      elseif key==keys.backspace then
        if selectBounds then
          deleteSelection()
        else
          local lineNum,index=curTextPos()
          if index==1 then
            if lineNum>1 then
              local prevLine=lines[lineNum-1]
              local xp=#prevLine.rawText+1
              local curLine=table.remove(lines,lineNum)

              updateLine(lineNum-1,prevLine.rawText..curLine.rawText)
              setCursorPos(xp,lineNum-1)
              dirtyFrom(curPos.y)
            end
          else
            local curText=lines[lineNum].rawText
            local newText=curText:sub(1,index-2)..curText:sub(index)
            updateLine(lineNum,newText)
            setCursorPos(index-1,lineNum)
          end
        end
        doCursor()
      elseif key==keys.delete then
        if selectBounds then
          deleteSelection()
        else
          local lineNum,index=curTextPos()
          local curText=lines[lineNum].rawText
          if index==#curText+1 then
            if lineNum<#lines then
              local nextLine=table.remove(lines,lineNum+1)
              updateLine(lineNum,curText..nextLine.rawText)
              dirtyFrom(curPos.y)
            end
          else
            local newText=curText:sub(1,index-1)..curText:sub(index+1)
            updateLine(lineNum,newText)
            curPos.x=index
          end
        end
        doCursor()
      elseif key==keys.home then
        setCursorPos(1)
      elseif key==keys["end"] then
        setCursorPos(#cursorRow().rawText+1)
      elseif key==keys.tab then
        if selectBounds then
          increaseIndent()
        else
          --get the affected line and actual x position in line
          local lineNum, index = curTextPos()
          local line=lines[lineNum]
          --insert our char!
          local left,right=line.rawText:sub(1,index-1),line.rawText:sub(index)
          local tab=#left%2==0 and "  " or " "
          insertText(tab)
        end
        doCursor()
      end
    elseif e[1]=="char" then
      local char=e[2]
      insertText(e[2])

    elseif e[1]=="mouse_scroll" then
      --if e[2]>0 then
      --  cursorDown()
      --else
      --  cursorUp()
      --end
      --drawLineNum()
      scrollY(e[2],true)
      doCursor()

    elseif e[1]=="mouse_click" then
      if e[2]==1 then
        local x,y=math.min(math.max(e[3],1),w),math.min(math.max(e[4],1),h)
        if y<=viewRect.h then
          if y+scrollPos.y-1 > #lines then
            curPos.y=#lines
            curPos.x=#lines[#lines].rawText+1
          else
            curPos.x=x
            curPos.y=y
          end
          updateSelect()
          drawLineNum()
          doCursor()
          lastClickPos={x=x,y=y}
        elseif mainMenu.visible and not mainMenu.selected then
          mainMenu:handleEvent(e)
        end

      elseif e[2]==2 then

      elseif e[2]==3 then

      end
    elseif e[1]=="mouse_drag" then
      if not blockStart then
        blockStart = curToTextPos(lastClickPos)
      end
      local dragTo=curToTextPos({x=math.min(math.max(e[3],1),w),y=math.min(math.max(e[4],1),h)})
      dragTo.x=math.min(dragTo.x,#lines[dragTo.y].rawText)
      local newBounds
      local dragFrom=blockStart
      if dragTo.y<dragFrom.y or (dragTo.y==dragFrom.y and dragTo.x<dragFrom.x) then
        newBounds={dragTo,dragFrom}
      else
        newBounds={dragFrom,dragTo}
      end
      updateSelect(newBounds)
    elseif e[1]=="term_resize" then
      updateViewRect()
      dirtyFrom(1)
      mainMenu:updatePos(1,h)
      advancedMenu.y=h
      doCursor()
    end
  end
end

term.clear()
term.setCursorPos(1,1)